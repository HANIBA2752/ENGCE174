# -*- coding: utf-8 -*-
"""LAB1

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1veHdjxE7yuF-kfT_VXHtyP8RdJ_ulY0t
"""

#List comprehension
squares = [x**2 for x in range(10)]

#Dictionary comprehension
square_dict = {x: x**2 for x in range(5)}

#Set comprehension
even_squares = {x**2 for x in range(10) if x % 2 == 0}

square = lambda x: x**2
print(square(5))  #Output: 25

def fibonacci():
    a, b = 0, 1
    while True:
        yield a
        a,b = b, a + b

fib = fibonacci()
print(next(fib))  #Output: 0
print(next(fib))  #Output: 1

# List initialization
number = [1, 2, 3, 4, 5]

#Accessing elements
print("First element:", number[0])  # Output: 1
print("Last element:", number[-1])  # Output: 5

#Slicing
print("Sliced elements:", number[2:4])  # Output: [3, 4]

# Appending anf extending
number.append(6)
print("After append:", number)  # Output: [1, 2, 3, 4, 5, 6]

#Removeing elements
number.remove(3)
print("After removal:", number) # Output: [1, 2, 3, 4, 5, 6]

# List comprehension to create a list of squares of even numbers
even_numbers = [x for x in range(10) if x % 2 == 0]
squares = [num**2 for num in even_numbers]
print("Squares of even numbers:", squares)  #Output: [0, 4, 16, 36, 64]

names = ["Alice", "Bob", "Charlie"]
ages = [25, 30, 35]
city = ["New York", "Los Angeles", "Chicago"]

for name, age,city in zip(names, ages, city):
    print(f"{name} is {age} years old and lives in {city}")

# Tuple initialization
coordinates = (3, 5)

x, y = coordinates
print("x-coordinate:", x) # Output: 3
print("y-coordinate:", y) # Output: 5

location = {(3, 5): "Home", (10, 20): "Office"}
print("Location at (3, 5):", location[(3, 5)])  # Output: Home

from collections import namedtuple

Point = namedtuple('Point', ['x', 'y'])

p1 = Point(3, 5)
p2 = Point(-1, 2)

print("Coordinates of p1:", p1.x, p1.y)

coordinates = (3, 5)

# Dictionary initialization
person = {'name': 'Alice', 'age': 30, 'city': 'New York'}

print("Name:", person['name'])

person['age'] = 31
print("Updated age:", person['age'])

for key, value in person.items():
    print(f"{key}: {value}")

# Dictionary comprehension to create a dictionary of squares
number = [1, 2, 3, 4, 5]
square_dict = {num: num**2 for num in number}
print("Dictionary of squares:", square_dict)

person = {'name': 'Alice', 'age':30}

# Using get() method to handle missing keys
city = person.get('city', 'Unknow')
print("City;", city)

#Dictionary of lists: Mapping cities to their temperatures
cities = {
    'New York': [32, 25, 30, 28, 35],
    'Los Angeles': [75, 68, 72, 70, 80],
    'Chicago': [20, 18, 22, 25, 15]
}

averages = {city: sum(temp) / len(temp) for city, temp in cities.items()}
print("Average temperatures:", averages)